---
title: "Identificación de patrones en datos de aceleración obtenidos mediante el celular"
subtitle: "Análisis de patrones de movimiento"
author: 
  - name: Sofía Duque Rendón 
  - name: Melany Franco Marin 
  - name: Juan David Trejos
  - name: Miguel Ángel Vargas Valencia
date: last-modified
date-format: full
lang: es
format: 
  pdf:
    toc: true
editor: source
execute: 
  echo: false
  warning: false
---

```{r}
rm(list = ls())
```

```{r}
library(tidyverse)
library(gridExtra)
library(patchwork)
library(cowplot)
library(zoo)
library(lubridate)
library(ggplot2)
```

# Introducción

# Descripción y recolección de los datos

```{r}
datosSofia <- read.csv("sensores/GrabacionSofia.csv")
datosMelany <- read.csv("sensores/GrabacionMelany.csv")
datosJuan <- read.csv("sensores/GrabacionJuanDavid.csv")
datosMiguel <- read.csv("sensores/GrabacionMiguel.csv")

```

Los datos fueron recolectados utilizando la aplicación *Arduino Science Journal*, que emplea los sensores del teléfono móvil para registrar las aceleraciones en los ejes X, Y y Z. Para este análisis se realizaron cuatro mediciones, de las cuales dos se llevaron a cabo mientras se ejecutaban las mismas actividades.

## timestamp

Marca temporal que indica el momento exacto en que fue tomada cada medición. Se encuentra en formato de milisegundos desde la época UNIX (1 de enero de 1970).

## AccX

Aceleración medida en el eje **X** del dispositivo móvil. Representa la fuerza de aceleración detectada en la dirección horizontal (izquierda-derecha) y se mide en metros por segundo al cuadrado (m/s²).

## AccY

Aceleración medida en el eje **Y** del dispositivo móvil. Representa la fuerza de aceleración en la dirección vertical (arriba-abajo), también en unidades de m/s².

## AccZ

Aceleración medida en el eje **Z** del dispositivo móvil. Corresponde a la aceleración perpendicular a la pantalla del dispositivo (profundidad), medida igualmente en m/s².

```{r}
datosSofia <- datosSofia |> 
  mutate(fecha = as.POSIXct(timestamp/1000),
         AccT = sqrt(AccX^2 + AccY^2 + AccZ^2))

datosMelany <- datosMelany |> 
  mutate(fecha = as.POSIXct(timestamp/1000),
         AccT = sqrt(AccX^2 + AccY^2 + AccZ^2))

datosJuan <- datosJuan |> 
  mutate(fecha = as.POSIXct(timestamp/1000),
         AccT = sqrt(AccX^2 + AccY^2 + AccZ^2))

datosMiguel <- datosMiguel |> 
  mutate(fecha = as.POSIXct(timestamp/1000),
         AccT = sqrt(AccX^2 + AccY^2 + AccZ^2))
```

\newpage

# Gráficas exploratorias de X, Y y Z

```{r}
gxSofia <- ggplot(datosSofia, aes(fecha, AccX)) +
  geom_line()
gySofia <- ggplot(datosSofia, aes(fecha, AccY)) +
  geom_line()
gzSofia <- ggplot(datosSofia, aes(fecha, AccZ)) +
  geom_line()

gxMelany <- ggplot(datosMelany, aes(fecha, AccX)) +
  geom_line()
gyMelany <- ggplot(datosMelany, aes(fecha, AccY)) +
  geom_line()
gzMelany <- ggplot(datosMelany, aes(fecha, AccZ)) +
  geom_line()

gxJuan <- ggplot(datosJuan, aes(fecha, AccX)) +
  geom_line()
gyJuan <- ggplot(datosJuan, aes(fecha, AccY)) +
  geom_line()
gzJuan <- ggplot(datosJuan, aes(fecha, AccZ)) +
  geom_line()

gxMiguel <- ggplot(datosMiguel, aes(fecha, AccX)) +
  geom_line()
gyMiguel <- ggplot(datosMiguel, aes(fecha, AccY)) +
  geom_line()
gzMiguel <- ggplot(datosMiguel, aes(fecha, AccZ)) +
  geom_line()
```

## Gráfica X, Y y Z número 1

```{r}
#| fig-height: 7
(gxSofia / gySofia / gzSofia)
```

### Análisis de los intervalos de tiempo del sensor para los datos de Sofía.

resultadosSofia \<- analizar_intervalos_sensor(datosSofia)

```{r}
analizar_intervalos_sensor <- function(datos, 
                                       col_timestamp = "timestamp", 
                                       umbral_percentil = 0.95, 
                                       titulo_grafico = "Distribución de los Intervalos de Muestreo del Sensor") {
  
  # Calcular intervalos entre mediciones consecutivas en segundos
  intervalos_s <- c(NA, diff(datos[[col_timestamp]])) / 1000
  
  # Obtener estadísticas de los intervalos válidos (excluyendo el primer NA)
  intervalos_validos <- intervalos_s[!is.na(intervalos_s)]
  resumen <- summary(intervalos_validos)
  
  print("----- Resumen numérico de los intervalos de tiempo (segundos) -----")
  print(resumen)
  
  # Detectar interrupciones o "gaps" en los datos
  umbral_gap_s <- quantile(intervalos_validos, probs = umbral_percentil, na.rm = TRUE)
  gaps_detectados <- which(intervalos_validos > umbral_gap_s)
  porcentaje_gaps <- length(gaps_detectados) / length(intervalos_validos) * 100
  
  cat("\n--- Detección de Interrupciones ---\n")
  cat("Umbral (Percentil", umbral_percentil * 100, "%):", umbral_gap_s, "segundos\n")
  cat("Número de interrupciones detectadas:", length(gaps_detectados), "\n")
  cat("Porcentaje de interrupciones sobre el total de mediciones:", round(porcentaje_gaps, 2), "%\n\n")
  
  #  Generar el gráfico de distribución
  grafico <- ggplot(data.frame(intervalos = intervalos_validos), aes(x = intervalos)) +
    geom_histogram(aes(y = after_stat(density)), binwidth = 0.001, fill = "skyblue", color = "black") +
    geom_density(alpha = .2, fill = "#FF6666") +
    labs(
      title = titulo_grafico,
      x = "Tiempo entre mediciones (segundos)",
      y = "Densidad"
    ) +
    theme_minimal()
  
  # Devolver una lista con los resultados y el gráfico
  resultados <- list(
    resumen_numerico = resumen,
    umbral_gap_s = umbral_gap_s,
    numero_gaps = length(gaps_detectados),
    porcentaje_gaps = porcentaje_gaps,
    grafico = grafico
  )
  
  return(resultados)
}

resultadosSofia <- analizar_intervalos_sensor(datosSofia)
```

El análisis de los intervalos de tiempo para los datos de Sofía revela que el sensor operó con una **alta consistencia**. La mediana del intervalo entre mediciones fue de **0.067 segundos** por cada dato de acelaración para cada eje.

Se definió un umbral de **0.069 segundos** (el percentil 95) para identificar las pausas más significativas. Se detectaron 1855 intervalos (el 5% más largo) que superaron este umbral, con una pausa máxima registrada de 0.097 segundos. La estabilidad del muestreo es notable, ya que el 96% de los datos se registraron con un intervalo de 0.069 segundos o menos.

Estas pausas más largas, aunque presentes, son infrecuentes y probablemente se deban a procesos del sistema operativo del móvil. Dada la alta consistencia general, estas irregularidades no deberían impactar de forma significativa el análisis posterior.

## Gráfica X, Y y Z número 2

```{r}
#| fig-height: 7
(gxMelany / gyMelany / gzMelany)
```

```{r}
resultadosSofia <- analizar_intervalos_sensor(datosMelany)
```

El análisis de los intervalos de tiempo para los datos de Melany revela que el sensor operó con una **excelente consistencia**. La mediana del intervalo entre mediciones fue de **0.019 segundos** por cada dato de acelaración para cada eje.

Se definió un umbral de **0.021 segundos** (el percentil 95) para identificar las pausas más significativas. Se detectaron 1855 intervalos (el 5% más largo) que superaron este umbral, con una pausa máxima registrada de 0.293 segundos. La estabilidad del muestreo es notable, ya que el 98% de los datos se registraron con un intervalo de 0.021 segundos o menos.

Estas pausas más largas, aunque presentes, son infrecuentes y probablemente se deban a procesos del sistema operativo del móvil. Dada la alta consistencia general, estas irregularidades no deberían impactar de forma significativa el análisis posterior.

## Gráfica X, Y y Z número 3

```{r}
#| fig-height: 7
(gxJuan / gyJuan / gzJuan)
```

```{r}
resultadosSofia <- analizar_intervalos_sensor(datosJuan)
```

El análisis de los intervalos de tiempo para los datos de Juan revela que el sensor operó con una **buena consistencia**. La mediana del intervalo entre mediciones fue de **0.067 segundos** por cada dato de acelaración para cada eje.

Se definió un umbral de **0.072 segundos** (el percentil 95) para identificar las pausas más significativas. Se detectaron 2598 intervalos (el 5% más largo) que superaron este umbral, con una pausa máxima registrada de 0.77 segundos. La estabilidad del muestreo es notable, ya que el 98% de los datos se registraron con un intervalo de 0.072 segundos o menos.

Estas pausas más largas, aunque presentes, son infrecuentes y probablemente se deban a procesos del sistema operativo del móvil. Dada la alta consistencia general, estas irregularidades no deberían impactar de forma significativa el análisis posterior.

## Gráfica X, Y y Z número 4

```{r}
#| fig-height: 7
(gxMiguel / gyMiguel / gzMiguel)
```

```{r}
resultadosSofia <- analizar_intervalos_sensor(datosMiguel)
```

El análisis de los intervalos de tiempo para esta toma de datos revela un comportamiento dual: periodos de muestreo consistente afectados por interrupciones significativas y anomalías. La mediana del intervalo entre mediciones fue de **0.065 segundos**

Sin embargo, la integridad de la serie se ve comprometida por pausas extremas. Se definió un umbral de 0.069 segundos (el percentil 95) para identificar las interrupciones más notables. Aunque el 96% de los intervalos están por debajo de este valor, el 3.02% restante contiene valores atípicos extremos, incluyendo una pausa máxima registrada de 83.2 segundos. Esta interrupción de más de un minuto no es una simple pausa, sino que divide la grabación en, al menos, dos sesiones independientes.

Adicionalmente, se observa un comportamiento anómalo en los intervalos más cortos, con un primer cuartil de solo 0.001 segundos, lo que sugiere posibles errores de medición o un modo de operación del sensor no uniforme.

```{r}
# Gráfico para eje X
gxConjunta <- ggplot() +
  geom_line(data = datosMelany, aes(x = fecha, y = AccX, color = "Melany")) +
  geom_line(data = datosJuan, aes(x = fecha, y = AccX, color = "Juan")) +
  labs(title = "Aceleración en el eje X", x = "Fecha", y = "AccX", color = "Persona") +
  theme_minimal()

# Gráfico para eje Y
gyConjunta <- ggplot() +
  geom_line(data = datosMelany, aes(x = fecha, y = AccY, color = "Melany")) +
  geom_line(data = datosJuan, aes(x = fecha, y = AccY, color = "Juan")) +
  labs(title = "Aceleración en el eje Y", x = "Fecha", y = "AccY", color = "Persona") +
  theme_minimal()

# Gráfico para eje Z
gzConjunta <- ggplot() +
  geom_line(data = datosMelany, aes(x = fecha, y = AccZ, color = "Melany")) +
  geom_line(data = datosJuan, aes(x = fecha, y = AccZ, color = "Juan")) +
  labs(title = "Aceleración en el eje Z", x = "Fecha", y = "AccZ", color = "Persona") +
  theme_minimal()
```

## Gráfica grabación en conjunto

Las grabaciones que se realizaron en conjunto fueron la número 2 y 3

```{r}
gxConjunta / gyConjunta / gzConjunta
```

En las mediciones realizadas de manera simultánea por Melany y Juan, se observa una notable correspondencia en los patrones de aceleración registrados en los tres ejes (X, Y y Z). Sin embargo, en varias secciones de las gráficas se identifican valores similares pero en dirección opuesta, lo que sugiere que uno de los celulares pudo haber estado orientado en sentido inverso al otro durante la grabación.

Adicionalmente, se evidencia que los datos recolectados por Melany presentan mayores variaciones en la aceleración, lo cual puede deberse a movimientos más intensos o bruscos durante la actividad registrada. A pesar de esta diferencia en la magnitud, ambas series mantienen cierta sincronía y regularidad en los cambios de dirección, lo que refuerza la idea de que ambos dispositivos estaban captando el mismo conjunto de eventos físicos, aunque desde posiciones o orientaciones distintas.

### Gráfica de la aceleración total.

$$
AccT = \sqrt{AccX^2 + AccY^2 + AccZ^2}
$$

```{r}
ggplot(datosSofia, aes(fecha, AccT)) +
  geom_line()

ggplot(datosMelany, aes(fecha, AccT)) +
  geom_line()

ggplot(datosJuan, aes(fecha, AccT)) +
  geom_line()

ggplot(datosMiguel, aes(fecha, AccT)) +
  geom_line()
```

\newpage

### Gráfica con una sección de la aceleración total.

```{r}
datosMiguelP <- datosMiguel |> 
  filter(fecha > as.POSIXct("2025-05-06 09:20:00") &
         fecha < as.POSIXct("2025-05-06 09:20:10"))
```

```{r}
ggplot(datosMiguelP, aes(fecha, AccT)) +
  geom_line()
```

```{r}
ggplot(datosMiguelP |> na.omit(), aes(fecha, AccT)) +
  geom_line()
```

\newpage

## Resumen de todos los datos de aceleración

```{r}
summary(datosSofia)

summary(datosMelany)

summary(datosJuan)

summary(datosMiguel)
```

## Identificación actividad

### Suavizar datos por intervalos

Aplicamos una media móvil para suavizar AccT y reducir ruido:

```{r}

# Para no afectar el calculo de la media por los NAs, se llenan con el valor anterior
datosMelany$AccT_sinNA <- na.locf(datosMelany$AccT, na.rm = FALSE)  # forward fill
datosMelany$AccT_suavizada <- rollmean(datosMelany$AccT_sinNA, k = 20, fill = NA, align = "right")

```

```{r}
# Llenar los NAs iniciales con la media
datosMelany$AccT_suavizada[is.na(datosMelany$AccT_suavizada)] <- 9.869162
```

#### Calcular diferencia entre segmentos

```{r}
# Agrupamos
datosMelany <- datosMelany %>%
  mutate(grupo = cut(as.POSIXct(fecha), breaks = "60 sec"))

# Calculamos media y varianza por grupo
resumen <- datosMelany %>%
  group_by(grupo) %>%
  summarise(
    media = mean(AccT_suavizada, na.rm = TRUE),
    varianza = var(AccT_suavizada, na.rm = TRUE),
    rango = max(AccT_suavizada, na.rm = TRUE) - min(AccT_suavizada, na.rm = TRUE),
    tiempo = first(fecha)
  ) %>%
  ungroup()

```

### Inferencia de actividades

```{r}
resumen |>
  select(tiempo, media, varianza, rango)
```

Basandonos en estas medidas del resumen se categoriza la posible actividad que se está realizando de la siguiente forma:

Mayor varianza -\> caminando

Varianza media-baja -\> vehículo

Varianza cercana a cero -\> en reposo

```{r}
resumen <- resumen %>%
  mutate(actividad = case_when(
    varianza > 1.25         ~ "Caminando",            
    varianza > 0.025         ~ "Vehículo",               
    varianza <= 0.025       ~ "Reposo",                 
    TRUE                   ~ "Reposo"     
  ))

```

```{r}

resumen$tiempo_inicio <- ymd_hms(resumen$tiempo)

datosMelanySegmentado <- datosMelany %>%
  mutate(tiempo = ymd_hms(fecha)) %>%
  mutate(actividad = cut(tiempo,  # aquí el cambio importante
                         breaks = c(resumen$tiempo_inicio, max(tiempo) + 1),
                         labels = resumen$actividad,
                         include.lowest = TRUE))


```

```{r}

ggplot(datosMelanySegmentado, aes(x = tiempo, y = AccT, color = actividad)) +
  geom_line(size = 0.4) +
  scale_color_brewer(palette = "Dark2") +
  labs(title = "Actividades Detectadas Automáticamente",
       x = "Tiempo", y = "Aceleración Total (AccT)", color = "Actividad") +
  theme_minimal()
```

Definicion de funcion para aplicarla a otras grabaciones con los pasos ya hechos

```{r}
identificar_actividad <- function(data, suavizado_k = 20, valor_inicial = 9.869162) {
  # Paso 1: Rellenar NAs con el valor anterior
  data$AccT_sinNA <- zoo::na.locf(data$AccT, na.rm = FALSE)
  
  # Paso 2: Suavizar con media móvil
  data$AccT_suavizada <- zoo::rollmean(data$AccT_sinNA, k = suavizado_k, fill = NA, align = "right")
  data$AccT_suavizada[is.na(data$AccT_suavizada)] <- valor_inicial
  
  # Paso 3: Crear grupos por minuto
  data <- data %>%
    mutate(grupo = cut(as.POSIXct(fecha), breaks = "60 sec"))
  
  # Paso 4: Calcular medidas resumen por grupo
  resumen <- data %>%
    group_by(grupo) %>%
    summarise(
      media = mean(AccT_suavizada, na.rm = TRUE),
      varianza = var(AccT_suavizada, na.rm = TRUE),
      rango = max(AccT_suavizada, na.rm = TRUE) - min(AccT_suavizada, na.rm = TRUE),
      tiempo = first(fecha),
      .groups = "drop"
    )
  
  # Paso 5: Clasificar actividad según la varianza
  resumen <- resumen %>%
    mutate(actividad = case_when(
      varianza > 1.25     ~ "Caminando",
      varianza > 0.025    ~ "Vehículo",
      varianza <= 0.025   ~ "Reposo",
      TRUE                ~ "Reposo"
    ))
  
  # Paso 6: Convertir tiempos
  resumen$tiempo_inicio <- ymd_hms(resumen$tiempo)
  data <- data %>%
    mutate(tiempo = ymd_hms(fecha))
  
  # Paso 7: Asignar actividad a cada fila según intervalo
  data <- data %>%
    mutate(actividad = cut(
      tiempo,
      breaks = c(resumen$tiempo_inicio, max(tiempo) + 1),
      labels = resumen$actividad,
      include.lowest = TRUE
    ))
  
  # Paso 8: Graficar resultado
  g <- ggplot(data, aes(x = tiempo, y = AccT, color = actividad)) +
    geom_line(size = 0.4) +
    scale_color_brewer(palette = "Dark2") +
    labs(
      title = "Actividades Detectadas Automáticamente",
      x = "Tiempo", y = "Aceleración Total (AccT)", color = "Actividad"
    ) +
    theme_minimal()
  
  return(list(
    datos_segmentados = data,
    resumen = resumen,
    grafico = g
  ))
}
```

Prueba con otros datos

```{r}

resultado <- identificar_actividad(datosJuan)

resultado$grafico

# Ver el resumen
#head(resultado$resumen)

# Ver los datos originales con actividades asignadas
#head(resultado$datos_segmentados)

```

##Conclusiones:

la media nos ayuda a ver el comportamiento de los datos para poder identificar los movimientos de cada actividad.

la varianza nos muestra las medidas de cambios que tiene cada actividad.

las graficas nos permiten reconocer patrones de movimiento de la actividad realizada.

algunas de las actividades generan mas variabilidad en los patrones de movimiento.

las subidas y bajadas bruscas de los movientos pueden identificar el cambio de actividad.

las actividades mas tranquilas tienen patrones de movimiento mas constantes.

los sensores de movimiento cambian segun la actividad y la posicion del dispositivo movil.

##Recomendaciones:

tener presente el contexto de las actividades realizadas en la toma de datos de movimento para tener un mejor analisis.

tomar los datos con el tiempo suficiente para poder observar los cambios y patrones de moviento.

tomar los datos desde el mismo dispositivo movil.

##bibliografia:

library tidyverse.
library gridExtra.
library patchwork.
library cowplot.
library zoo.
library lubridate.
library ggplot2.
chat gpt.
